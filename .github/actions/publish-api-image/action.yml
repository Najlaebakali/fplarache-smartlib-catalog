name: 'Publish API Image'
description: 'Publish API Image for Java Application'
inputs:
  java-environment:
    description: 'Java environment (e.g., dev, prod)'
    default: 'dev'
  dockerfile:
    description: 'Path to the Dockerfile'
    default: 'fplarache-smartlib-catalog/Dockerfile'
  cmd:
    description: 'Command to run the Java app (e.g., java -jar app.jar)'
    default: 'java -jar /app.jar'  # This may need to change depending on where you copy the JAR in Dockerfile
  image-short-name:
    description: 'Short name for the Docker image'
    default: 'fplarache-smartlib-catalog'
  image-prefix:
    description: 'Prefix for the Docker image name (ensure no leading dash)'
    default: 'dev'
  image-tag:
    description: 'Tag for the Docker image (e.g., v1.0.0)'
    default: 'latest'
  ecr-registry:
    description: 'Amazon ECR registry URL (e.g., 123456789012.dkr.ecr.us-west-1.amazonaws.com)'
    default: '774305596814.dkr.ecr.eu-north-1.amazonaws.com'

outputs:
  image-uri:
    description: 'The URI of the pushed image'
    value: ${{ inputs.ecr-registry }}/${{ inputs.image-prefix }}-${{ inputs.image-short-name }}:${{ inputs.image-tag }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx (optional, if using multi-platform builds)
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - shell: bash
      run: |
        # Extract input parameters
        IMAGE_PREFIX="${{ inputs.image-prefix }}"
        IMAGE_SHORT_NAME="${{ inputs.image-short-name }}"
        IMAGE_TAG="${{ inputs.image-tag }}"
        ECR_REGISTRY="${{ inputs.ecr-registry }}"
        DOCKERFILE_PATH="${{ inputs.dockerfile }}"
        JAVA_ENVIRONMENT="${{ inputs.java-environment }}"

         # Debugging: Print Dockerfile path
        echo "Dockerfile Path: $DOCKERFILE_PATH"
        
        # Step 1: Validate inputs
        if [[ -z "$IMAGE_PREFIX" ]]; then
          echo "Error: IMAGE_PREFIX is not set or empty"
          exit 1
        fi
        if [[ -z "$IMAGE_SHORT_NAME" ]]; then
          echo "Error: IMAGE_SHORT_NAME is not set or empty"
          exit 1
        fi
        if [[ -z "$IMAGE_TAG" ]]; then
          echo "Error: IMAGE_TAG is not set or empty"
          exit 1
        fi
        if [[ -z "$ECR_REGISTRY" ]]; then
          echo "Error: ECR_REGISTRY is not set or empty"
          exit 1
        fi
        if [[ -z "$DOCKERFILE_PATH" || ! -f "$DOCKERFILE_PATH" ]]; then
          echo "Error: DOCKERFILE_PATH is not set or does not point to a valid file"
          exit 1
        fi

        # Step 2: Ensure the image name is correctly formatted
        IMAGE_PREFIX=$(echo $IMAGE_PREFIX | sed 's/^-//')

        # Step 3: Construct the full image name
        IMAGENAME="${ECR_REGISTRY}/${IMAGE_PREFIX}-${IMAGE_SHORT_NAME}:${IMAGE_TAG}"

        # Step 4: Display the formatted image name
        echo "Formatted image name: $IMAGENAME"

        # Step 5: Build the Docker image
        docker build \
          -f $DOCKERFILE_PATH \
          -t $IMAGENAME .

        # Step 6: Push the Docker image
        docker push $IMAGENAME

        # Step 7: Output the image URI
        echo "image-uri=$IMAGENAME" >> $GITHUB_OUTPUT
