name: 'Publish API Image'
description: 'Publish API Image for Java Application'
inputs:
  java-environment:
    description: 'Java environment (e.g., dev, prod)'
    default: 'dev'
  published-app:
    description: 'Path to the built Java application (e.g., target/*.jar)'
    default: 'target/fplarache-smartlib-catalog-0.0.1-SNAPSHOT.jar'
  dockerfile:
    description: 'Path to the Dockerfile'
    default: '../../Dockerfile'
  cmd:
    description: 'Command to run the Java app (e.g., java -jar app.jar)'
    default: 'java -jar app.jar'
  image-short-name:
    description: 'Short name for the Docker image'
    default: 'fplarache-smartlib-catalog'
  image-prefix:
    description: 'Prefix for the Docker image name (ensure no leading dash)'
    default: 'dev'  # Remove the leading dash here if present
  image-tag:
    description: 'Tag for the Docker image (e.g., v1.0.0)'
    default: 'latest'
  ecr-registry:
    description: 'Amazon ECR registry URL (e.g., 123456789012.dkr.ecr.us-west-1.amazonaws.com)'
    default: '774305596814.dkr.ecr.eu-north-1.amazonaws.com'

outputs:
  image-uri:
    description: 'The URI of the pushed image'
    value: ${{ inputs.ecr-registry }}/${{ inputs.image-prefix }}-${{ inputs.image-short-name }}:latest

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        # Extract input parameters
        IMAGE_PREFIX="${{ inputs.image-prefix }}"
        IMAGE_SHORT_NAME="${{ inputs.image-short-name }}"
        IMAGE_TAG="${{ inputs.image-tag }}"
        ECR_REGISTRY="${{ inputs.ecr-registry }}"

        # Ensure the image name is correctly formatted
        # Remove leading hyphen from the image prefix, if exists
        IMAGE_PREFIX=$(echo $IMAGE_PREFIX | sed 's/^-//')

        # Construct the full image name
        IMAGENAME="${ECR_REGISTRY}/${IMAGE_PREFIX}-${IMAGE_SHORT_NAME}:${IMAGE_TAG}"

        # Display the formatted image name
        echo "Formatted image name: $IMAGENAME"

        # Build the Docker image
        docker build \
          --build-arg JAVA_API_PATH_ARG=${{ inputs.published-app }} \
          --build-arg JAVA_API_CMD_ARG=${{ inputs.cmd }} \
          --build-arg JAVA_ENVIRONMENT_ARG=${{ inputs.java-environment }} \
          -f ${{ inputs.dockerfile }} \
          -t $IMAGENAME .

        # Tag the image as 'latest'
        docker image tag $IMAGENAME $IMAGENAME:latest

        # Push the image with both tags
        docker push $IMAGENAME
        docker push $IMAGENAME:latest

        # Output the image URI
        echo "image-uri=$IMAGENAME" >> $GITHUB_OUTPUT
