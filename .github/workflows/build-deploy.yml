name: Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-dev"
      - "v[0-9]+.[0-9]+.[0-9]+-prod"
  workflow_dispatch:

env:
  BEFORE_SHA: ${{ github.event.before }}
  # REGION: YOUR_SERVICE_REGION  

jobs:
  setup:
    name: "Deploy"
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Étape 2 : Configurer JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape 3 : Extraire le nom de la branche
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      # Étape 4 : Récupérer l'historique de la branche
      - name: Fetch branch history
        run: git fetch origin ${{ steps.extract_branch.outputs.branch }}

      # Étape 5 : Vérifier si pré-release (dev ou prod)
      - name: Is Prerelease
        uses: winterjung/split@v2
        id: split_pre
        with:
          msg: ${{ steps.extract_branch.outputs.branch }}
          separator: "-"

      # Étape 6 : Définir les variables selon l'environnement
      - name: Set vars
        id: vars
        env:
          ENVIRONMENT: ${{ steps.split_pre.outputs._1 }}
          APPLICATION: smartlib-catalog
          SERVICE: catalog-service
        run: |
          # Définition des variables nécessaires pour le déploiement
          ENVIRONMENT="${{ steps.split_pre.outputs._1 }}"  # Récupération de l'environnement (dev ou prod)
          APPLICATION="smartlib-catalog"                  # Nom de l'application
          SERVICE="catalog-service"                       # Nom du service

          # Vérification que les variables sont définies
          if [[ -z "$ENVIRONMENT" || -z "$APPLICATION" || -z "$SERVICE" ]]; then
            echo "Error: One of the environment variables is missing."
            exit 1
          fi

          # Configuration des clés AWS selon l'environnement
          if [ "$ENVIRONMENT" = "dev" ]; then
            echo "awsAccessKey=${{ secrets.DEV_ADMIN_AWS_ACCESS_KEY }}" >> $GITHUB_OUTPUT
            echo "awsSecretKey=${{ secrets.DEV_ADMIN_AWS_SECRET_KEY }}" >> $GITHUB_OUTPUT
          elif [ "$ENVIRONMENT" = "prod" ]; then
            echo "awsAccessKey=${{ secrets.PROD_ADMIN_AWS_ACCESS_KEY }}" >> $GITHUB_OUTPUT
            echo "awsSecretKey=${{ secrets.PROD_ADMIN_AWS_SECRET_KEY }}" >> $GITHUB_OUTPUT
          fi

          # Configuration des noms ECS
          echo "ecsCluster=${ENVIRONMENT}-${APPLICATION}-${SERVICE}-fgcluster" >> $GITHUB_OUTPUT
          
          echo "ecsService=${ENVIRONMENT}-${APPLICATION}-${SERVICE}-fgservice" >> $GITHUB_OUTPUT



      # Étape 7 : Configurer les credentials AWS
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_ADMIN_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_ADMIN_AWS_SECRET_KEY }}
          aws-region: "eu-north-1"

      # Étape 8 : Login à Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Étape 9 : Construire et empaqueter l'application Java
      - name: Build and package Java application
        run: |
          mvn clean package -DskipTests
          if [ $? -ne 0 ]; then
            echo "Maven build failed"
            exit 1
          fi



      - name: Afficher l'emplacement du fichier JAR
        run: |
           ls -alh target/  # Vérifie l'existence de app.jar
           test -f target/fplarache-smartlib-catalog-0.0.1-SNAPSHOT.jar || (echo "Error: fplarache-smartlib-catalog-0.0.1-SNAPSHOT.jar not found" && exit 1)

      ###############################
      # Catalog
      ###############################

      - name: List files in target directory
        run: ls -alh target/
        
      # Étape 10 : Construire l'image Docker pour WebAPI
      - name: Build Docker image - WebApi
        id: publish-webapi-image
        uses: ./.github/actions/publish-api-image
        with:
          maven-environment: ${{ steps.vars.outputs.environment }}
          context: .
          published-app: target/fplarache-smartlib-catalog-0.0.1-SNAPSHOT.jar  # Corrected JAR file path
          cmd: "java -jar /app.jar"
          main-class: "dev-fplarache-smartlib-catalog"
          image-short-name: dev-fplarache-smartlib-catalog-repo
          #image-prefix: ${{ steps.vars.outputs.fullServiceName }}
          #image-prefix: ""
          image-tag: latest
          #image-tag: ${{ github.sha }}
          ecr-registry: ${{ steps.login-ecr.outputs.registry }}
          
      # Step to display the image name and tag
      - name: Display Docker image name and tag
        run: |
          echo "Docker image name: dev-fplarache-smartlib-catalog-repo"
          echo "Docker image tag: latest" 
   

      # Étape 11 : Pusher l'image Docker vers ECR
      - name: Push Docker image to ECR
        run: |
         docker build -t dev-fplarache-smartlib-catalog-repo .
         docker tag dev-fplarache-smartlib-catalog-repo:latest 774305596814.dkr.ecr.eu-north-1.amazonaws.com/dev-fplarache-smartlib-catalog-repo:latest
         docker push 774305596814.dkr.ecr.eu-north-1.amazonaws.com/dev-fplarache-smartlib-catalog-repo:latest
        
         




      # Étape 12 : Déployer WebAPI sur ECS
      - name: Deploy ECS - WebApi
        env:
          #ECS_CLUSTER: ${{ steps.vars.outputs.fullServiceName }}-fgcluster
          ECS_CLUSTER: ${{ steps.vars.outputs.ecsCluster }}
          #ECS_SERVICE: ${{ steps.vars.outputs.fullServiceName }}-fgservice
          ECS_SERVICE: ${{ steps.vars.outputs.ecsService }}
        run: |
          #TASK_JSON="$(aws ecs update-service --force-new-deployment --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE})"
          TASK_JSON="$(aws ecs update-service --force-new-deployment --cluster "${ECS_CLUSTER}" --service "${ECS_SERVICE}")"

          TASK_ARN="$(printf '%s' "${TASK_JSON}"|jq -r '.service.deployments[0].id')"
          echo "deployment-arn=$TASK_ARN" >> $GITHUB_OUTPUT
