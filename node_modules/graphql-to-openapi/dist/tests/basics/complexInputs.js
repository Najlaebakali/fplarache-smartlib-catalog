"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path = require("path");
var index_1 = require("../../index");
var assert = require("assert");
var stringify = require("json-stable-stringify");
describe('complexInputs', function () {
    var inputQueryFilename = path.join(__dirname, 'complexInputs.graphql');
    var query = (0, fs_1.readFileSync)(inputQueryFilename).toString();
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var expectedOutput = require('./complexInputs.json');
    describe('given a schema string', function () {
        it('should produce a valid openapi spec', function () {
            var schema = (0, fs_1.readFileSync)(path.join(__dirname, 'complexInputsSchema.graphql')).toString();
            var actualOutput = (0, index_1.graphqlToOpenApi)({
                schema: schema,
                query: query,
            }).openApiSchema;
            var normalizedActualOutput = stringify(actualOutput, { space: '  ' });
            var normalizedExpectedOutput = stringify(expectedOutput, {
                space: '  ',
            });
            assert.ok(!!actualOutput);
            assert.equal(normalizedActualOutput, normalizedExpectedOutput);
        });
    });
    describe('given an introspection schema', function () {
        it('should produce a valid openapi spec', function () {
            var introspectionSchema = JSON.parse((0, fs_1.readFileSync)(path.join(__dirname, 'complexInputsSchema.json')).toString());
            var actualOutput = (0, index_1.graphqlToOpenApi)({
                introspectionSchema: introspectionSchema,
                query: query,
            }).openApiSchema;
            var normalizedActualOutput = stringify(actualOutput, { space: '  ' });
            var normalizedExpectedOutput = stringify(expectedOutput, {
                space: '  ',
            });
            assert.ok(!!actualOutput);
            assert.equal(normalizedActualOutput, normalizedExpectedOutput);
        });
    });
});
