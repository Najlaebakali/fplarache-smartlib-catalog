"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path = require("path");
var index_1 = require("../../index");
var assert = require("assert");
var GraphQLToOpenAPIConverter_1 = require("../../lib/GraphQLToOpenAPIConverter");
var graphql_1 = require("graphql");
describe('error-conditions', function () {
    it('should fail on a bad input query', function () {
        var schema = (0, fs_1.readFileSync)(path.join(__dirname, '..', 'graphql-pokemon', 'schema.graphql')).toString();
        var query = "\n      query {\n        unknown\n      }\n    ";
        var output = (0, index_1.graphqlToOpenApi)({
            schema: schema,
            query: query,
        });
        assert.ok(output.queryErrors.length > 0);
    });
    it('should fail on an invalid schema with a string', function () {
        var schema = "\n      type Query {\n        badSyntax() : moreBadSyntax\n      }\n    ";
        var query = "\n      query {\n        pokemon(id: \"Test\", name: \"Test\") {\n          id\n        }\n      }";
        var output = (0, index_1.graphqlToOpenApi)({
            schema: schema,
            query: query,
        });
        assert.ok(output.schemaError);
        assert.equal(output.schemaError.name, 'GraphQLError');
    });
    it('should fail on an invalid schema with a Source', function () {
        var schema = new graphql_1.Source("\n      type Query {\n        badSyntax() : moreBadSyntax\n      }\n    ", 'Test Query');
        var query = "\n      query {\n        pokemon(id: \"Test\", name: \"Test\") {\n          id\n        }\n      }";
        var output = (0, index_1.graphqlToOpenApi)({
            schema: schema,
            query: query,
        });
        assert.ok(output.schemaError);
        assert.equal(output.schemaError.name, 'GraphQLError');
        assert.deepEqual(output.schemaError.locations, [{ column: 19, line: 3 }]);
    });
    it('should fail on an invalid introspection schema', function () {
        var introspectionSchema = {
            invalid: 'schema',
        };
        var query = "\n      query {\n        pokemon(id: \"Test\", name: \"Test\") {\n          id\n        }\n      }";
        var output = (0, index_1.graphqlToOpenApi)({
            introspectionSchema: introspectionSchema,
            query: query,
        });
        assert.ok(output.schemaError);
        assert.equal(output.schemaError.name, 'Error');
    });
    it('should fail on a unnamed, valid input query', function () {
        var schema = (0, fs_1.readFileSync)(path.join(__dirname, '..', 'graphql-pokemon', 'schema.graphql')).toString();
        var query = "\n      query {\n        pokemon(id: \"Test\", name: \"Test\") {\n          id\n        }\n      }\n    ";
        var output = (0, index_1.graphqlToOpenApi)({
            schema: schema,
            query: query,
        });
        assert.ok(output.error);
        assert.ok(output.error instanceof GraphQLToOpenAPIConverter_1.NoOperationNameError);
        assert.equal(output.error.name, 'NoOperationNameError');
    });
    it('should fail on a syntax error in the input query', function () {
        var schema = (0, fs_1.readFileSync)(path.join(__dirname, '..', 'graphql-pokemon', 'schema.graphql')).toString();
        var query = "\n      query {\n        pokemon(id: \"Test\", name: \"Test\") {\n          id\n        }\n      } a\n    ";
        var output = (0, index_1.graphqlToOpenApi)({
            schema: schema,
            query: query,
        });
        assert.ok(output.queryErrors);
        assert.ok(output.queryErrors[0] instanceof graphql_1.GraphQLError);
    });
    it('should fail if neither schema nor introspection schema are supplied', function () {
        var query = "\n      query {\n        someQuery(token: \"Te\") {\n          someResult\n        }\n      }\n    ";
        try {
            (0, index_1.graphqlToOpenApi)({
                query: query,
            });
        }
        catch (err) {
            assert.ok(err instanceof GraphQLToOpenAPIConverter_1.MissingSchemaError);
            return;
        }
        assert.fail('exception not produced');
    });
});
