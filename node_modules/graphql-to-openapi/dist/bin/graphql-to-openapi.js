#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var fs_1 = require("fs");
var index_1 = require("../index");
var graphql_1 = require("graphql");
var yaml_1 = require("yaml");
var _a = commander_1.program
    .description([
    'Converts a graphql schema and query into',
    'an openapi json document. The openapi json',
    'document is a best-effort approximation',
    'of a GET endpoint specification for the',
    'graphql query supplied.',
].join('\n'))
    .option('-s, --schema <schema>', 'A graphql schema file')
    .option('-i, --introspection-schema-json <introspectionSchemaJson>', 'A graphql introspection query output (json) file')
    .requiredOption('-q, --query <query>', 'A graphql query file')
    .option('-c, --scalarConfigFile <scalarConfigFile>', 'A configuration file (json formatted)' + 'supporting custom scalars')
    .option('--pretty', 'pretty json output', true)
    .option('-y, --yaml', 'Output in yaml format', false)
    .parse(process.argv)
    .opts(), schema = _a.schema, introspectionSchemaJson = _a.introspectionSchemaJson, query = _a.query, scalarConfigFile = _a.scalarConfigFile, pretty = _a.pretty, yaml = _a.yaml;
var inputSchema;
var introspectionSchema;
if (schema) {
    inputSchema = (0, fs_1.readFileSync)(schema).toString();
}
else if (introspectionSchemaJson) {
    introspectionSchema = JSON.parse((0, fs_1.readFileSync)(introspectionSchemaJson).toString());
}
var inputQuery = (0, fs_1.readFileSync)(query).toString();
var scalarConfig;
if (scalarConfigFile) {
    if ((0, fs_1.existsSync)(scalarConfigFile)) {
        scalarConfig = JSON.parse((0, fs_1.readFileSync)(scalarConfigFile).toString());
    }
}
var needsScalarConfigFile = false;
var _b = (0, index_1.graphqlToOpenApi)({
    schema: schema ? new graphql_1.Source(inputSchema, schema) : undefined,
    introspectionSchema: introspectionSchema,
    query: new graphql_1.Source(inputQuery, query),
    scalarConfig: scalarConfig,
    onUnknownScalar: function (unknownScalar) {
        if (!scalarConfig && scalarConfigFile) {
            needsScalarConfigFile = true;
        }
        if (!scalarConfig && !scalarConfigFile) {
            throw new Error('A scalar configuration filename is required');
        }
        if (!scalarConfig) {
            scalarConfig = {};
        }
        if (!scalarConfig[unknownScalar]) {
            scalarConfig[unknownScalar] = { type: 'string' };
        }
        return scalarConfig[unknownScalar];
    },
}), error = _b.error, schemaError = _b.schemaError, queryErrors = _b.queryErrors, openApiSchema = _b.openApiSchema;
if (error) {
    throw error;
}
if ((queryErrors === null || queryErrors === void 0 ? void 0 : queryErrors.length) > 0) {
    throw queryErrors[0];
}
if (schemaError) {
    throw schemaError;
}
if (yaml) {
    process.stdout.write((0, yaml_1.stringify)(JSON.parse(JSON.stringify(openApiSchema)), {
        sortMapEntries: true,
    }));
}
else if (pretty) {
    process.stdout.write(JSON.stringify(openApiSchema, null, 2));
}
else {
    process.stdout.write(JSON.stringify(openApiSchema));
}
if (needsScalarConfigFile) {
    (0, fs_1.writeFileSync)(scalarConfigFile, JSON.stringify(scalarConfig, null, 2));
    console.error('the default custom scalar configuration was written to ' + scalarConfigFile);
}
process.exit(0);
