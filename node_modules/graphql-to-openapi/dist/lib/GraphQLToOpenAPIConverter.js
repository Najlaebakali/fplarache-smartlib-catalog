"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLToOpenAPIConverter = exports.UnknownScalarError = exports.MissingSchemaError = exports.NoOperationNameError = void 0;
// eslint-disable @typescript-eslint/ban-types
var language_1 = require("graphql/language");
var TypeInfo_1 = require("graphql/utilities/TypeInfo");
var validation_1 = require("graphql/validation");
var parser_1 = require("graphql/language/parser");
var graphql_1 = require("graphql");
var definition_1 = require("graphql/type/definition");
var NoOperationNameError = /** @class */ (function (_super) {
    __extends(NoOperationNameError, _super);
    function NoOperationNameError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) /* istanbul ignore next */ || this;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain
        _this.name = NoOperationNameError.name;
        return _this;
    }
    return NoOperationNameError;
}(Error));
exports.NoOperationNameError = NoOperationNameError;
var MissingSchemaError = /** @class */ (function (_super) {
    __extends(MissingSchemaError, _super);
    function MissingSchemaError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) /* istanbul ignore next */ || this;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain
        _this.name = MissingSchemaError.name;
        return _this;
    }
    return MissingSchemaError;
}(Error));
exports.MissingSchemaError = MissingSchemaError;
var UnknownScalarError = /** @class */ (function (_super) {
    __extends(UnknownScalarError, _super);
    function UnknownScalarError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) /* istanbul ignore next */ || this;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain
        _this.name = UnknownScalarError.name;
        return _this;
    }
    return UnknownScalarError;
}(Error));
exports.UnknownScalarError = UnknownScalarError;
var typeMap = {
    ID: {
        type: 'string',
    },
    '[ID]': {
        type: 'array',
        items: {
            type: 'string',
            nullable: true,
        },
    },
    '[ID!]': {
        type: 'array',
        items: {
            type: 'string',
            nullable: false,
        },
    },
    String: {
        type: 'string',
    },
    '[String!]': {
        type: 'array',
        items: {
            type: 'string',
            nullable: false,
        },
    },
    '[String]': {
        type: 'array',
        items: {
            type: 'string',
            nullable: true,
        },
    },
    '[Int]': {
        type: 'array',
        items: {
            type: 'integer',
            nullable: true,
        },
    },
    '[Int!]': {
        type: 'array',
        items: {
            type: 'integer',
            nullable: false,
        },
    },
    '[Float]': {
        type: 'array',
        items: {
            type: 'number',
            nullable: true,
        },
    },
    '[Float!]': {
        type: 'array',
        items: {
            type: 'number',
            nullable: false,
        },
    },
    '[Boolean]': {
        type: 'array',
        items: {
            type: 'boolean',
            nullable: true,
        },
    },
    '[Boolean!]': {
        type: 'array',
        items: {
            type: 'boolean',
            nullable: false,
        },
    },
    Int: { type: 'integer' },
    Float: { type: 'number' },
    Boolean: { type: 'boolean' },
};
function getScalarType(typeName, scalarConfig, // eslint-disable-line @typescript-eslint/ban-types
onUnknownScalar // eslint-disable-line @typescript-eslint/ban-types
// eslint-disable-next-line @typescript-eslint/ban-types
) {
    if (scalarConfig[typeName]) {
        return scalarConfig[typeName];
    }
    var r = onUnknownScalar(typeName);
    if (r) {
        scalarConfig[typeName] = r;
        return r;
    }
    throw new UnknownScalarError('Unknown scalar: ' + typeName);
}
function fieldDefToOpenApiField(typeInfo, scalarConfig, // eslint-disable-line @typescript-eslint/ban-types
onUnknownScalar // eslint-disable-line @typescript-eslint/ban-types
) {
    var fieldDef = typeInfo.getFieldDef();
    var typeName = fieldDef.type.toString();
    var description = fieldDef.description || undefined;
    var nullable;
    var type = fieldDef.type;
    if (type instanceof graphql_1.GraphQLNonNull) {
        nullable = false;
        type = type.ofType;
    }
    else {
        nullable = true;
    }
    var openApiType = {
        nullable: nullable,
        items: undefined,
        properties: undefined,
        type: undefined,
        enum: undefined,
        anyOf: undefined,
        description: description,
    };
    var typeNameWithoutBang = typeName.replace(/[!]$/, '');
    if (typeMap[typeNameWithoutBang]) {
        return __assign(__assign({}, typeMap[typeNameWithoutBang]), { description: description, nullable: nullable });
    }
    if (type instanceof definition_1.GraphQLList) {
        openApiType.type = 'array';
        var itemType = type.ofType;
        var nullableItems = true;
        if (itemType instanceof graphql_1.GraphQLNonNull) {
            nullableItems = false;
            itemType = itemType.ofType;
        }
        if (itemType instanceof definition_1.GraphQLObjectType) {
            openApiType.items = {
                type: 'object',
                properties: {},
            };
        }
        if (itemType instanceof definition_1.GraphQLUnionType) {
            openApiType.items = {
                anyOf: [],
                nullable: nullableItems,
            };
        }
        if (itemType instanceof graphql_1.GraphQLScalarType) {
            openApiType.items = getScalarType(itemType.name, scalarConfig, onUnknownScalar);
            openApiType.items.nullable = nullableItems;
        }
        return openApiType;
    }
    if (type instanceof definition_1.GraphQLObjectType) {
        openApiType.type = 'object';
        openApiType.properties = {};
        return openApiType;
    }
    if (type instanceof graphql_1.GraphQLEnumType) {
        openApiType.type = 'string';
        openApiType.enum = type.getValues().map(function (v) { return v.value; });
        openApiType.nullable = nullable;
        return openApiType;
    }
    if (type instanceof definition_1.GraphQLUnionType) {
        openApiType.anyOf = [];
        openApiType.nullable = nullable;
        return openApiType;
    }
    var scalarType = type;
    var t = getScalarType(scalarType.name, scalarConfig, onUnknownScalar);
    return __assign(__assign({}, t), { description: description, nullable: nullable });
}
function recurseInputType(obj, depth, scalarConfig, // eslint-disable-line @typescript-eslint/ban-types
onUnknownScalar // eslint-disable-line @typescript-eslint/ban-types
) {
    // istanbul ignore next
    if (depth > 50) {
        // istanbul ignore next
        throw new Error('depth limit exceeded: ' + depth);
    }
    if (obj instanceof graphql_1.GraphQLInputObjectType) {
        var inputObjectType = obj;
        var properties = Object.entries(inputObjectType.getFields()).reduce(function (properties, _a) {
            var name = _a[0], f = _a[1];
            properties[name] = recurseInputType(f.type, depth + 1, scalarConfig, onUnknownScalar);
            properties[name].description = f.description;
            return properties;
        }, {});
        return {
            type: 'object',
            nullable: true,
            description: inputObjectType.description || undefined,
            properties: properties,
        };
    }
    if (obj instanceof definition_1.GraphQLList) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var list = obj;
        return {
            type: 'array',
            nullable: true,
            items: recurseInputType(list.ofType, depth + 1, scalarConfig, onUnknownScalar),
        };
    }
    if (obj instanceof graphql_1.GraphQLScalarType) {
        var name_1 = obj.name;
        if (name_1 === 'Float') {
            return {
                type: 'number',
                nullable: true,
            };
        }
        if (name_1 === 'Int') {
            return {
                type: 'integer',
                nullable: true,
            };
        }
        if (name_1 === 'String') {
            return {
                type: 'string',
                nullable: true,
            };
        }
        if (name_1 === 'Boolean') {
            return {
                type: 'boolean',
                nullable: true,
            };
        }
        // istanbul ignore else
        if (name_1 === 'ID') {
            return {
                type: 'string',
                nullable: true,
            };
        }
        return getScalarType(name_1, scalarConfig, onUnknownScalar);
    }
    if (obj instanceof graphql_1.GraphQLEnumType) {
        var enumValues = obj.getValues();
        return {
            type: 'string',
            description: obj.description || undefined,
            nullable: true,
            enum: enumValues.map(function (_a) {
                var name = _a.name;
                return name;
            }),
        };
    }
    // istanbul ignore else
    if (obj instanceof graphql_1.GraphQLNonNull) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var nonNull = obj;
        return __assign(__assign({}, recurseInputType(nonNull.ofType, depth + 1, scalarConfig, onUnknownScalar)), { nullable: false });
    }
    // istanbul ignore next
    throw new Error("Unexpected InputType: ".concat(obj));
}
var GraphQLToOpenAPIConverter = /** @class */ (function () {
    function GraphQLToOpenAPIConverter(schema, introspectionSchema, onUnknownScalar, // eslint-disable-line @typescript-eslint/ban-types
    scalarConfig // eslint-disable-line @typescript-eslint/ban-types
    ) {
        this.schema = schema;
        this.introspectionSchema = introspectionSchema;
        this.onUnknownScalar = onUnknownScalar;
        this.scalarConfig = scalarConfig;
        if (!onUnknownScalar) {
            this.onUnknownScalar = function () {
                return null;
            };
        }
        if (!scalarConfig) {
            this.scalarConfig = {};
        }
        if (schema) {
            try {
                this.graphqlSchema = (0, graphql_1.buildSchema)(this.schema);
            }
            catch (err) {
                this.schemaError = err;
            }
        }
        else if (introspectionSchema) {
            try {
                this.graphqlSchema = (0, graphql_1.buildClientSchema)(this.introspectionSchema);
            }
            catch (err) {
                this.schemaError = err;
            }
        }
        else {
            throw new MissingSchemaError('neither schema nor introspection schema supplied');
        }
    }
    GraphQLToOpenAPIConverter.prototype.toOpenAPI = function (query) {
        var _a = this, schemaError = _a.schemaError, onUnknownScalar = _a.onUnknownScalar, scalarConfig = _a.scalarConfig;
        if (schemaError) {
            return {
                schemaError: schemaError,
            };
        }
        var graphqlSchema = this.graphqlSchema;
        var parsedQuery;
        try {
            parsedQuery = (0, parser_1.parse)(query);
        }
        catch (err) {
            return { queryErrors: [err] };
        }
        var queryErrors = (0, validation_1.validate)(graphqlSchema, parsedQuery);
        if (queryErrors.length > 0) {
            return {
                queryErrors: queryErrors,
            };
        }
        var openApiSchema = {
            openapi: '3.0.3',
            info: {
                title: 'Not specified',
                license: {
                    name: 'Not specified',
                },
                version: 'Not specified',
            },
            servers: [
                {
                    url: '/',
                },
            ],
            paths: {},
        };
        var error;
        var operationDef;
        var currentSelection = [];
        var typeInfo = new graphql_1.TypeInfo(graphqlSchema);
        var fragments = [];
        openApiSchema = (0, language_1.visit)(parsedQuery, (0, TypeInfo_1.visitWithTypeInfo)(typeInfo, {
            Document: {
                leave: function () {
                    return openApiSchema;
                },
            },
            FragmentDefinition: {
                enter: function (node) {
                    var fragmentType = typeInfo.getType();
                    var openApiType;
                    if (fragmentType instanceof definition_1.GraphQLUnionType) {
                        openApiType = {
                            anyOf: [],
                        };
                    }
                    else {
                        openApiType = {
                            type: 'object',
                            properties: {},
                        };
                    }
                    currentSelection.unshift({
                        node: node,
                        openApiType: openApiType,
                    });
                },
                leave: function (node) {
                    var result = currentSelection.shift().openApiType;
                    fragments[node.name.value] = result;
                    return result;
                },
            },
            OperationDefinition: {
                enter: function (node) {
                    var openApiType = {
                        type: 'object',
                        properties: {
                        // To be filled by Field visitor
                        },
                    };
                    if (!node.name) {
                        error = new NoOperationNameError('GraphQLToOpenAPIConverter requires a named ' +
                            "operation on line ".concat(node.loc.source.locationOffset.line, " ") +
                            'of input query');
                        return language_1.BREAK;
                    }
                    openApiSchema.paths['/' + node.name.value] = operationDef = {
                        get: {
                            parameters: [],
                            responses: {
                                '200': {
                                    description: 'response',
                                    content: {
                                        'application/json': {
                                            schema: openApiType,
                                        },
                                    },
                                },
                            },
                        },
                    };
                    currentSelection.unshift({
                        node: node,
                        openApiType: openApiType,
                    });
                },
                leave: function () {
                    return openApiSchema;
                },
            },
            VariableDefinition: function (_a) {
                var variable = _a.variable;
                var t = recurseInputType(typeInfo.getInputType(), 0, scalarConfig, onUnknownScalar);
                if (t.type === 'object' || t.type === 'array') {
                    operationDef.get.parameters.push({
                        name: variable.name.value,
                        in: 'query',
                        required: !t.nullable,
                        schema: {
                            type: t.type,
                            items: t.items,
                            properties: t.properties,
                        },
                        description: t.description || undefined,
                    });
                }
                else {
                    operationDef.get.parameters.push({
                        name: variable.name.value,
                        in: 'query',
                        required: !t.nullable,
                        schema: {
                            type: t.type,
                        },
                        description: t.description || undefined,
                    });
                }
            },
            FragmentSpread: {
                enter: function (node) {
                    var openApiType = currentSelection[0].openApiType;
                    var fragment = fragments[node.name.value];
                    if (openApiType.anyOf) {
                        openApiType.anyOf = fragment.anyOf;
                    }
                    else if (openApiType.items) {
                        openApiType.items.properties = fragment.properties;
                    }
                    else {
                        openApiType.properties = fragment.properties;
                    }
                },
            },
            Field: {
                enter: function (node) {
                    var _a, _b;
                    var name;
                    if (node.alias) {
                        name = node.alias.value;
                    }
                    else {
                        name = node.name.value;
                    }
                    var openApiType = fieldDefToOpenApiField(typeInfo, scalarConfig, onUnknownScalar);
                    var parentObj = currentSelection[0].openApiType;
                    if (parentObj.type === 'object') {
                        parentObj.properties[name] = openApiType;
                    }
                    else {
                        // array
                        parentObj.items.properties[name] = openApiType;
                    }
                    if (openApiType.type === 'array' &&
                        ((_a = openApiType.items) === null || _a === void 0 ? void 0 : _a.type) === 'object') {
                        currentSelection.unshift({
                            node: node,
                            openApiType: openApiType,
                        });
                    }
                    else if (openApiType.type === 'array' &&
                        ((_b = openApiType.items) === null || _b === void 0 ? void 0 : _b.anyOf)) {
                        currentSelection.unshift({
                            node: node,
                            openApiType: openApiType,
                        });
                    }
                    else if (openApiType.anyOf) {
                        currentSelection.unshift({
                            node: node,
                            openApiType: openApiType,
                        });
                    }
                    else if (openApiType.type === 'object') {
                        currentSelection.unshift({
                            node: node,
                            openApiType: openApiType,
                        });
                    }
                },
                leave: function (node) {
                    // raw reference comparison doesn't work here. Using
                    // loc as a proxy instead.
                    if (currentSelection[0].node.loc === node.loc) {
                        var result = currentSelection.shift().openApiType;
                        return result;
                    }
                },
            },
            InlineFragment: {
                enter: function (node) {
                    var _a;
                    var openApiType = {
                        type: 'object',
                        nullable: undefined,
                        properties: {},
                    };
                    var topOfStack = currentSelection[0].openApiType;
                    if ((_a = topOfStack.items) === null || _a === void 0 ? void 0 : _a.anyOf) {
                        var nullable = topOfStack.items.nullable;
                        openApiType.nullable = nullable;
                        topOfStack.items.anyOf.push(openApiType);
                    }
                    else {
                        topOfStack.anyOf.push(openApiType);
                    }
                    currentSelection.unshift({
                        node: node,
                        openApiType: openApiType,
                    });
                },
                leave: function () {
                    return currentSelection.shift().openApiType;
                },
            },
        }));
        if (error) {
            return {
                error: error,
            };
        }
        return {
            openApiSchema: openApiSchema,
        };
    };
    return GraphQLToOpenAPIConverter;
}());
exports.GraphQLToOpenAPIConverter = GraphQLToOpenAPIConverter;
